rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Residents collection
    match /residents/{residentId} {
      allow read: if isAdmin() || 
        isOwner(residentId);
      allow write: if isAdmin();
    }

    // Document requests collection
    match /document_requests/{requestId} {
      allow read: if isAdmin() || 
        isOwner(resource.data.residentId);
      allow create: if isAdmin() || 
        (isAuthenticated() && request.resource.data.residentId == request.auth.uid);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAdmin() || 
        isOwner(resource.data.recipientId);
      allow create: if isAdmin();
      allow update: if isAdmin() || 
        (isOwner(resource.data.recipientId) && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']));
      allow delete: if isAdmin();
    }

    // Counters collection (for generating IDs)
    match /counters/{counterId} {
      allow read, write: if isAdmin();
    }

    // Admins collection
    match /admins/{adminId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isAdmin() || isOwner(userId));
      allow write: if isAdmin() || isOwner(userId);
    }
  }
} 